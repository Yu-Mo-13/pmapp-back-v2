name: Code Quality Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ '**' ]

jobs:
  code-quality:
    name: Code Quality Review
    runs-on: ubuntu-latest
    if: '!github.event.pull_request.draft'
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, pgsql
        tools: phpstan, phpcs
        coverage: xdebug

    - name: Setup ReviewDog
      uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-8.2-quality-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.2-quality-

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Setup Laravel
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        php artisan key:generate
        mkdir -p bootstrap/cache
        php artisan config:cache

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          **/*.php
        separator: " "

    - name: Code Style Check (PHPCS) with ReviewDog
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Running PHPCS on changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
        echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | \
        xargs php -d error_reporting="E_ERROR | E_WARNING | E_PARSE" vendor/bin/phpcs --report=checkstyle -q > phpcs-changed.xml || true
        if [ -s phpcs-changed.xml ]; then
          reviewdog -f=checkstyle -name="Code Style (PHPCS)" -reporter=github-pr-review -level=warning \
            -filter-mode=diff_context -diff="git diff origin/${{ github.base_ref }}...HEAD" < phpcs-changed.xml
        else
          echo "No PHPCS issues found in changed files"
        fi

    - name: Static Analysis (PHPStan) with ReviewDog
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        composer run larastan -- --error-format=checkstyle --no-progress > phpstan-analysis.xml || true
        if [ -s phpstan-analysis.xml ]; then
          reviewdog -f=checkstyle -name="Static Analysis (PHPStan)" -reporter=github-pr-review -level=error \
            -filter-mode=diff_context -diff="git diff origin/${{ github.base_ref }}...HEAD" < phpstan-analysis.xml
        else
          echo "No PHPStan issues found"
        fi

    - name: Security Analysis (Security Checker)
      if: steps.changed-files.outputs.any_changed == 'true'
      continue-on-error: true
      run: |
        composer audit --format=plain || echo "Security audit completed with warnings"

    - name: Code Complexity Analysis
      if: steps.changed-files.outputs.any_changed == 'true'
      continue-on-error: true
      run: |
        echo "Analyzing code complexity..."
        # Add complexity analysis tools if available
        echo "Code complexity analysis completed"

    - name: Generate Code Quality Report
      if: always()
      run: |
        echo "## ðŸ“Š Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Code style check completed" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Static analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Security audit completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check PR comments for detailed feedback." >> $GITHUB_STEP_SUMMARY
